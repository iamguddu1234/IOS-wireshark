//
//  A9_mobile_network.swift
//  Wireshark
//
//  Created by Akshay Bhasme on 02/06/24.
//

import SwiftUI

struct A9_mobile_network: View {
    
    let z1 = """
    Analyzing Mobile Network Traffic: Capturing and analyzing network packets on mobile devices.
    """
    let z2 = """
    Capturing and analyzing network packets on mobile devices can provide insights into mobile network behavior, application performance, and potential security issues. Here\'s a step-by-step guide for capturing and analyzing network packets on mobile devices:
    """
    let z3_title = """
    1. Set up a capturing environment:
    """
    let z3 = """
    Prepare your capturing environment by connecting the mobile device and the capturing system to the same network segment or VLAN. Ensure that the capturing system has Wireshark installed and is ready to capture packets.
    """
    let z4_title = """
    2. Enable USB debugging (Android):
    """
    let z4 = """
    For Android devices, enable USB debugging in the device\'s developer options. This allows you to establish a connection between the mobile device and the capturing system for packet capture.
    """
    let z5_title = """
    3. Connect the mobile device:
    """
    let z5 = """
    Connect the mobile device to the capturing system using a USB cable. Ensure that the device is recognized and properly connected to the capturing system.
    """
    let z6_title = """
    4. Install capturing tools (iOS):
    """
    let z6 = """
    For iOS devices, install a packet capture tool such as Charles Proxy or Wireshark\'s TShark on a device or computer within the same network. Configure the proxy settings on the iOS device to route traffic through the capturing tool.
    """
    let z7_title = """
    5. Start packet capture:
    """
    let z7 = """
    On the capturing system, start capturing packets using Wireshark or the capturing tool you have installed. Select the appropriate network interface connected to the mobile device.
    """
    let z8_title = """
    6. Configure mobile device network settings:
    """
    let z8 = """
    Configure the network settings on the mobile device to route traffic through the capturing system. This can be done by setting the device\'s proxy settings or configuring a VPN connection to redirect traffic to the capturing system.
    """
    let z9_title = """
    7. Capture mobile network traffic:
    """
    let z9 = """
    Once the mobile device is configured, start using the applications or performing activities you want to capture. The capturing tool on the capturing system will record the network packets transmitted and received by the mobile device.
    """
    let z10_title = """
    8. Filter packets:
    """
    let z10 = """
    Apply appropriate filters in Wireshark or the capturing tool to isolate the packets related to the mobile device and the applications of interest. Use filters based on IP addresses, port numbers, or application protocols to narrow down the captured packets.
    """
    let z11_title = """
    9. Analyze captured packets:
    """
    let z11 = """
    Analyze the captured packets to gain insights into mobile network behavior, application performance, or potential security issues. Look for protocol-specific patterns, performance bottlenecks, error codes, or anomalies in the captured packets.
    """
    let z12_title = """
    10. Decrypt encrypted traffic:
    """
    let z12 = """
    If the mobile device uses encrypted traffic, you may need to configure Wireshark or the capturing tool to decrypt the traffic. Provide the necessary SSL certificates or keys to enable decryption and analyze the decrypted traffic.
    """
    let z13_title = """
    11. Analyze application behavior:
    """
    let z13 = """
    Focus on the packets exchanged by specific applications of interest. Analyze the application-layer protocols such as HTTP, HTTPS, or other application-specific protocols. Look for performance issues, latency, errors, or unauthorized data transmissions.
    """
    let z14_title = """
    12. Correlate with device logs:
    """
    let z14 = """
    Correlate the captured packets with logs generated by the mobile device or specific applications. Analyze the timestamps, events, or errors in the logs to gain additional insights and cross-verify the information captured in the packets.
    """
    let z16_title = """
    13. Analyze mobile-specific protocol:
    """
    let z16 = """
    Mobile devices often use specific protocols for network communication, such as GSM, CDMA, 3G, 4G, or 5G. Analyze the packets related to these protocols to understand mobile network behavior, signal strength, handover events, or any network-specific issues.
    """
    let z17_title = """
    14. Examine battery usage:
    """
    let z17 = """
    Analyze the network packets to understand the impact of network activities on battery usage. Look for excessive data transfers, frequent network connections, or inefficient network behaviors that can drain the device\'s battery quickly.
    """
    let z18_title = """
    15. Analyze location-related data:
    """
    let z18 = """
    Mobile devices transmit location-related data through protocols like GPS, Wi-Fi, or cellular positioning. Analyze the packets to understand how location information is obtained, transmitted, and utilized by applications or services.
    """
    let z19_title = """
    16. Monitor push notification:
    """
    let z19 = """
    Analyze packets related to push notifications sent to mobile devices. Look for the protocols used, payload contents, and any security considerations related to push notifications. Analyzing push notification traffic can provide insights into application behavior and user engagement.
    """
    let z20_title = """
    17. Identify network latency and performance issues:
    """
    let z20 = """
    Analyze the network packets to identify latency or performance issues specific to mobile networks. Look for delays in establishing connections, slow response times, or high packet loss rates that may impact the user experience on mobile devices.
    """
    let z21_title = """
    18. Analyze mobile app communication:
    """
    let z21 = """
    Focus on the packets exchanged by specific mobile applications. Analyze the communication between the mobile app and backend servers or APIs. Look for authentication mechanisms, data transmission, and any potential security vulnerabilities.
    """
    let z22_title = """
    19. Monitor mobile web browsing:
    """
    let z22 = """
    Analyze packets related to mobile web browsing. Look for HTTP or HTTPS requests and responses, caching behavior, cookie handling, or any potential performance or security issues specific to mobile web browsing.
    """
    let z23_title = """
    20. Analyze mobile device behavior during roaming:
    """
    let z23 = """
    Capture and analyze packets when the mobile device is roaming on a different network. Look for signaling events, handover procedures, or any issues related to mobile device connectivity and performance during roaming.
    """
    let z24_title = """
    21. Investigate mobile hotspot usage:
    """
    let z24 = """
    Capture and analyze packets when the mobile device is used as a hotspot. Examine the traffic flowing through the hotspot to understand the usage patterns, data consumption, and any potential security concerns.
    """
    let z25_title = """
    22. Analtze voice and video calls:
    """
    let z25 = """
    Capture and analyze packets during voice and video calls made through mobile applications or services. Look for protocols such as RTP, RTCP, or SRTP. Analyze packet loss, jitter, latency, or any other factors affecting call quality.
    """
    let z26_title = """
    23. Correlate with mobile device performance metrics:
    """
    let z26 = """
    Correlate the captured packet data with mobile device performance metrics such as CPU usage, memory usage, or battery consumption. Analyzing these correlations can provide insights into how network activities impact overall device performance.
    """
    let z27_title = """
    24. Use filters and coloring rules:
    """
    let z27 = """
    Utilize Wireshark\'s filtering capabilities and coloring rules to focus on specific aspects of mobile network traffic. Create filters based on IP addresses, ports, or protocols to narrow down the captured packets and use coloring rules to highlight packets of interest.
    """
    let z28 = """
    Remember to follow legal guidelines, privacy regulations, and ethical practices when capturing and analyzing network packets on mobile devices. Ensure that you have proper authorization, respect user privacy, and protect sensitive data while capturing and analyzing network traffic.
    """
    let z29 = """
    Remember to comply with legal and privacy regulations while capturing and analyzing network packets on mobile devices. Ensure that you have proper authorization and adhere to ethical guidelines when capturing and analyzing sensitive data transmitted over the mobile network.
    """
    
    var body: some View {
        ZStack {
            // Background color or other background elements
            Color("bg").ignoresSafeArea()

            VStack(spacing: 0) {
                ScrollView {
                    VStack(alignment: .leading, spacing: 15) {
                    

                        Head(title: z1)

                                Stext(title: z2)

                                Text2(title1: z3_title, title2: z3)

                                 Text2(title1: z4_title, title2: z4)

                                  Text2(title1: z5_title, title2: z5)

                                   Text2(title1: z6_title, title2: z6)

                                    Text2(title1: z7_title, title2: z7)

                                     Text2(title1: z8_title, title2: z8)

                                      Text2(title1: z9_title, title2: z9)

                                       Text2(title1: z10_title, title2: z10)

                                        Text2(title1: z11_title, title2: z11)

                                         Text2(title1: z12_title, title2: z12)

                                          Text2(title1: z13_title, title2: z13)

                                           Text2(title1: z14_title, title2: z14)

//                                            Text2(title1: z15_title, title2: z15)

                                             Text2(title1: z16_title, title2: z16)

                                              Text2(title1: z17_title, title2: z17)

                                               Text2(title1: z18_title, title2: z18)

                                                Text2(title1: z19_title, title2: z19)

                                                 Text2(title1: z20_title, title2: z20)

                                                  Text2(title1: z21_title, title2: z21)

                                                   Text2(title1: z22_title, title2: z22)

                                                    Text2(title1: z23_title, title2: z23)

                                                     Text2(title1: z24_title, title2: z24)

                                                      Text2(title1: z25_title, title2: z25)

                                                       Text2(title1: z26_title, title2: z26)

                                                        Text2(title1: z27_title, title2: z27)

                                                        Stext(title: z28)

                                                        Stext(title: z29)


                     
        
                    }
                    .padding()
                }
                
                Spacer()
                
         // Adjust the height of the banner as needed
                BannerAds()
            }
        }
    }
}

#Preview {
    A9_mobile_network()
}
