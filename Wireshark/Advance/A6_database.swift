//
//  A6_database.swift
//  Wireshark
//
//  Created by Akshay Bhasme on 02/06/24.
//

import SwiftUI

struct A6_database: View {
    
    let ff1 = """
    Analyzing Database Traffic: Analyzing database protocols (e.g., MySQL, PostgreSQL) and database interactions.
    """
    let ff2 = """
    Analyzing database traffic using Wireshark can provide insights into database protocols, interactions, and potential performance or security issues. Here are steps to help you analyze database traffic using Wireshark:
    """
    let ff3_title = """
    1. Capture database traffic:
    """
    let ff3 = """
    Start capturing network traffic using Wireshark on the system where the database server is located or on a network segment where the database traffic flows through. Ensure that Wireshark is running and capturing packets during the database interactions.
    """
    let ff4_title = """
    2. Filter traffic for the specific database protocol:
    """
    let ff4 = """
    Database traffic is usually sent over specific protocols such as MySQL, PostgreSQL, or Microsoft SQL Server. Apply a filter in Wireshark to isolate packets related to the specific database protocol you want to analyze. Use display filters like `mysql`, `pgsql`, or `mssql` to focus on the relevant packets.
    """
    let ff5_title = """
    3. Identify client-server interactions:
    """
    let ff5 = """
    Look for packets that indicate client-server interactions, such as connection establishment, authentication, query execution, or result retrieval. Analyze the sequence and timing of these interactions to understand the flow of the database transactions.
    """
    let ff6_title = """
    4. Analyze protocol-specific packets:
    """
    let ff6 = """
    Wireshark provides protocol dissectors for various database protocols. Expand the packets related to the database protocol to view the dissected information. Wireshark will display protocol-specific fields and values, allowing you to analyze the database interactions at a higher level.
    """
    let ff7_title = """
    5. Extract query and response payloads:
    """
    let ff7 = """
    Wireshark enables you to extract and view the payload of database queries and responses. Look for SQL statements or command strings in the payload data to understand the specific database operations being executed. This can be useful for identifying potential performance issues, SQL injection attempts, or unauthorized queries.
    """
    let ff8_title = """
    6. Analyze query execution time:
    """
    let ff8 = """
    Examine the timestamps and response times of the database interactions. Look for slow query execution times or delays in the response. This information can help identify performance bottlenecks or potential database optimization opportunities.
    """
    let ff9_title = """
    7. Investigate anomalies or errors:
    """
    let ff9 = """
    Pay attention to any anomalies or errors observed in the database traffic. Look for error response codes, unexpected database responses, or malformed queries. These can indicate potential security vulnerabilities, database misconfigurations, or data integrity issues.
    """
    let ff10_title = """
    8. Correlate with database logs:
    """
    let ff10 = """
    Correlate the captured database traffic with the logs generated by the database server. Compare the timestamps, query details, and error messages in the Wireshark capture with the corresponding entries in the database logs. This helps in cross-verifying the information and gaining a deeper understanding of the database interactions.
    """
    let ff11_title = """
    9. Decrypt encrypted database traffic:
    """
    let ff11 = """
    If the database traffic is encrypted, Wireshark may not be able to dissect the payload data. However, you can still analyze the packet headers, examine the packet sizes, and look for patterns or anomalies in the encrypted traffic.
    """
    let ff12_title = """
    10. Document findings and perform further analysis:
    """
    let ff12 = """
    Document your findings, including any identified issues, suspicious queries, or performance bottlenecks. If necessary, export the captured packets or specific packets of interest for further analysis or sharing with database administrators or security teams.
    """
    let ff13 = """
    Remember to follow security and privacy guidelines when capturing and analyzing database traffic. Ensure that you have proper authorization and adhere to legal requirements for accessing and analyzing sensitive data.
    """


    var body: some View {
        ZStack {
            // Background color or other background elements
            Color("bg").ignoresSafeArea()

            VStack(spacing: 0) {
                ScrollView {
                    VStack(alignment: .leading, spacing: 15) {
                    

                        Head(title: ff1)

                                Stext(title: ff2)

                                Text2(title1: ff3_title, title2: ff3)

                                Text2(title1: ff4_title, title2: ff4)

                                Text2(title1: ff5_title, title2: ff5)

                                Text2(title1: ff6_title, title2: ff6)

                                Text2(title1: ff7_title, title2: ff7)

                                Text2(title1: ff8_title, title2: ff8)

                                Text2(title1: ff9_title, title2: ff9)

                                Text2(title1: ff10_title, title2: ff10)

                                Text2(title1: ff11_title, title2: ff11)

                                Text2(title1: ff12_title, title2: ff12)

                                Stext(title: ff13)



                     
        
                    }
                    .padding()
                }
                
                Spacer()
                
         // Adjust the height of the banner as needed
                BannerAds()
            }
        }
    }
}

#Preview {
    A6_database()
}
