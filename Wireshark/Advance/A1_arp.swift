//
//  A1_arp.swift
//  Wireshark
//
//  Created by Akshay Bhasme on 02/06/24.
//

import SwiftUI

struct A1_arp: View {
    
    let v1 = """
    Analyzing ARP Traffic: Understanding Address Resolution Protocol (ARP) and analyzing ARP packets.
    """
    let v2 = """
    Analyzing ARP (Address Resolution Protocol) traffic using Wireshark allows you to understand network device addressing, troubleshoot network connectivity issues, and detect potential ARP-related problems. Here\'s a step-by-step guide for analyzing ARP traffic using Wireshark:
    """
    let v3_title = """
    1. Capture network traffic:
    """
    let v3 = """
    Start capturing network traffic using Wireshark on the network interface where the ARP traffic is present. Capture the traffic during a representative time period or when specific network events occur.
    """
    let v4_title = """
    2. Filter packets for ARP protocol:
    """
    let v4 = """
    Apply a display filter in Wireshark to capture packets specific to the ARP protocol. Use the display filter `arp` to focus on packets related to ARP.
    """
    let v5_title = """
    3. Analyze ARP request packets:
    """
    let v5 = """
    Analyze the ARP request packets captured by Wireshark. ARP requests are sent by devices to determine the MAC (Media Access Control) address associated with an IP address. Analyze the source and target IP addresses in the ARP requests and examine the MAC addresses involved.
    """
    let v6_title = """
    4. Identify ARP replies:
    """
    let v6 = """
    Look for corresponding ARP reply packets in response to the ARP requests. Analyze the ARP replies to verify that devices are providing the correct MAC address for the requested IP address.
    """
    let v7_title = """
    5. Examine IP-to_MAC mappings:
    """
    let v7 = """
    Analyze the IP-to-MAC mappings present in the ARP packets. Verify that the IP addresses and associated MAC addresses are accurate and match the expected mappings for devices on the network. Identify any inconsistencies or conflicts in the mappings.
    """
    let v8_title = """
    6. Identify ARP spoofing:
    """
    let v8 = """
    Look for suspicious or unauthorized ARP traffic, which could indicate ARP spoofing attacks. Analyze ARP packets for duplicate IP addresses, multiple MAC addresses associated with a single IP address, or unexpected changes in IP-to-MAC mappings.
    """
    let v9_title = """
    7. Analyze gratuitous ARP packets:
    """
    let v9 = """
    Gratuitous ARP packets are ARP requests or replies sent by devices without being prompted. Analyze gratuitous ARP packets to detect network configuration changes, IP address conflicts, or device reconfiguration events.
    """
    let v10_title = """
    8. Analyze ARP cache entries:
    """
    let v10 = """
    Analyze the ARP cache entries in the captured packets. The ARP cache contains IP-to-MAC mappings maintained by devices. Look for changes or updates in the ARP cache entries and evaluate the consistency and accuracy of the mappings.
    """
    let v11_title = """
    9. Identify network connectivity issues:
    """
    let v11 = """
    Analyze ARP traffic to identify network connectivity issues. Look for failed ARP requests, missing or incorrect ARP replies, or inconsistent IP-to-MAC mappings. These issues can indicate network configuration problems or connectivity disruptions.
    """
    let v12_title = """
    10. Correlate with network device logs:
    """
    let v12 = """
    Correlate the captured ARP traffic with logs generated by network devices, such as routers or switches. Compare timestamps, events, and error messages to gain additional insights into ARP-related issues and validate the findings from the packet analysis.
    """
    let v13_title = """
    11. Analyze ARP traffic patterns:
    """
    let v13 = """
    Analyze the frequency and patterns of ARP traffic on the network. Look for excessive ARP requests, abnormal ARP reply times, or unusual spikes in ARP activity. These patterns can indicate network congestion, misconfigured devices, or potential ARP-related performance issues.
    """
    let v14_title = """
    12. Document finding and recommendations:
    """
    let v14 = """
    Document your findings, identified ARP-related issues, and recommendations for optimizing ARP traffic or resolving connectivity problems. Communicate the results to the relevant stakeholders, such as network administrators or system owners, to address any identified issues.
    """
    let v15 = """
    Regular analysis of ARP traffic helps ensure proper network device addressing, troubleshoot network connectivity problems, and detect potential ARP-related security threats. By following these steps, you can gain valuable insights into ARP behavior and address any ARP-related issues using Wireshark.
    """
    
    var body: some View {
        ZStack {
            // Background color or other background elements
            Color("bg").ignoresSafeArea()

            VStack(spacing: 0) {
                ScrollView {
                    VStack(alignment: .leading, spacing: 15) {
                    

                        Head(title: v1)

                               Stext(title: v2)

                               Text2(title1: v3_title, title2: v3)

                               Text2(title1: v4_title, title2: v4)

                               Text2(title1: v5_title, title2: v5)

                               Text2(title1: v6_title, title2: v6)

                               Text2(title1: v7_title, title2: v7)

                               Text2(title1: v8_title, title2: v8)

                               Text2(title1: v9_title, title2: v9)

                               Text2(title1: v10_title, title2: v10)

                               Text2(title1: v11_title, title2: v11)

                               Text2(title1: v12_title, title2: v12)

                               Text2(title1: v13_title, title2: v13)

                               Text2(title1: v14_title, title2: v14)

                               Stext(title: v15)



                     
        
                    }
                    .padding()
                }
                
                Spacer()
                
         // Adjust the height of the banner as needed
                BannerAds()
            }
        }
    }
}

#Preview {
    A1_arp()
}
